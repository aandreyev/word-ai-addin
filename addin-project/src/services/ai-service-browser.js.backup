/*
 * AI Service Integration for Word Add-in
 * This module handles communication with the AI services in the browser environment
 */

// Import error handling utilities
import { globalLogger, globalErrorHandler, globalPerformanceMonitor } from './error-handling.js';

/**
 * AI Service class that handles document analysis using Gemini API
 * 
 * Configuration:
 * - Model: Uses GEMINI_MODEL environment variable (injected via webpack.DefinePlugin)
 * - API Key: Uses GEMINI_API_KEY environment variable (injected via webpack.DefinePlugin)  
 * - Environment variables are sourced from Doppler in development
 */
class AIService {
  constructor() {
    this.logger = globalLogger;
    this.errorHandler = globalErrorHandler;
    this.performanceMonitor = globalPerformanceMonitor;
    
    this.apiKey = this.getApiKey();
    this.baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models';
    this.modelName = process.env.GEMINI_MODEL || 'gemini-1.5-flash';
    this.maxRetries = 3;
    this.timeout = 30000; // 30 seconds
    
    this.logger.info('AI Service initialized', { modelName: this.modelName });
  }

  /**
   * Get API key from environment variables
   * In production, this would be securely provided by the backend
   */
  getApiKey() {
    // Get from environment variable injected by webpack
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey || apiKey === 'API_KEY_NOT_SET') {
      this.logger.error('GEMINI_API_KEY not properly configured');
      throw new Error('API key not configured. Please set GEMINI_API_KEY in your environment.');
    }
    return apiKey;
  }

  /**
   * Analyze document text and return editing suggestions
   * @param {string} documentText - The full document text
   * @returns {Promise<Array>} - Array of editing suggestions
   */
  async analyzeDocument(documentText) {
    const operationId = this.performanceMonitor.startOperation('documentAnalysis', {
      textLength: documentText.length,
      wordCount: documentText.split(/\s+/).length
    });

    try {
      this.logger.info('Starting document analysis', { 
        textLength: documentText.length,
        wordCount: documentText.split(/\s+/).length 
      });

      // 🔍 DEBUG: Show document content
      console.log('📄 DOCUMENT ANALYSIS - Input Text:');
      console.log('=' .repeat(60));
      console.log(documentText);
      console.log('=' .repeat(60));
      console.log(`📊 Stats: ${documentText.split(/\s+/).length} words, ${documentText.length} characters`);

      // Validate input
      if (!documentText || typeof documentText !== 'string') {
        throw new Error('Invalid document text provided');
      }

      if (documentText.trim().length === 0) {
        throw new Error('Document text is empty');
      }

      // Prepare the analysis prompt
      const prompt = this.buildAnalysisPrompt(documentText);
      this.logger.debug('Analysis prompt prepared', { promptLength: prompt.length });
      
      // 🔍 DEBUG: Show the prompt being sent to AI
      console.log('\n🤖 AI PROMPT:');
      console.log('-' .repeat(40));
      console.log(prompt);
      console.log('-' .repeat(40));
      
      // Call Gemini API with retry logic
      const response = await this.callGeminiAPIWithRetry(prompt);
      
      // 🔍 DEBUG: Show raw AI response
      console.log('\n📥 RAW AI RESPONSE:');
      console.log('-' .repeat(40));
      console.log(response);
      console.log('-' .repeat(40));
      
      // Parse the response into structured suggestions
      const suggestions = this.parseAISuggestions(response);
      
      // 🔍 DEBUG: Show parsed suggestions with detailed JSON
      console.log('\n📋 PARSED SUGGESTIONS - DETAILED BREAKDOWN:');
      console.log('=' .repeat(60));
      console.log(`🔢 Total Suggestions Generated: ${suggestions.length}`);
      console.log('=' .repeat(60));
      
      suggestions.forEach((suggestion, index) => {
        console.log(`\n📌 SUGGESTION #${index + 1}:`);
        console.log(`   🎯 Action: ${suggestion.action.toUpperCase()}`);
        
        if (suggestion.action === 'insert') {
          console.log(`   📍 Insert After Paragraph: ${suggestion.after_index}`);
        } else {
          console.log(`   📍 Target Paragraph: ${suggestion.index}`);
        }
        
        console.log(`   📝 Instruction: "${suggestion.instruction}"`);
        if (suggestion.reason) {
          console.log(`   💡 Reason: "${suggestion.reason}"`);
        }
        
        console.log('   🔧 COMPLETE JSON STRUCTURE:');
        console.log('   ' + JSON.stringify(suggestion, null, 4).replace(/\n/g, '\n   '));
        console.log('-' .repeat(50));
      });
      
      // Show model response analysis
      console.log('\n🧠 AI MODEL ANALYSIS SUMMARY:');
      console.log(`   📊 Model Used: ${this.modelName}`);
      console.log(`   🎯 Actions Distribution:`);
      const actionCounts = suggestions.reduce((acc, s) => {
        acc[s.action] = (acc[s.action] || 0) + 1;
        return acc;
      }, {});
      Object.entries(actionCounts).forEach(([action, count]) => {
        console.log(`     - ${action.toUpperCase()}: ${count} suggestions`);
      });
      console.log('=' .repeat(60));
      
      this.logger.info('Document analysis completed', { 
        suggestionsCount: suggestions.length 
      });

      this.performanceMonitor.endOperation(operationId, 'SUCCESS', {
        suggestionsGenerated: suggestions.length
      });

      return suggestions;

    } catch (error) {
      const errorInfo = this.errorHandler.handleError(error, 'analyzeDocument', {
        textLength: documentText?.length || 0,
        operationId
      });

      this.performanceMonitor.endOperation(operationId, 'ERROR', {
        errorCategory: errorInfo.category
      });

      throw new Error(errorInfo.userMessage);
    }
  }

  /**
   * Build the analysis prompt for the AI
   * @param {string} documentText - Document content
   * @returns {string} - Formatted prompt
   */
  buildAnalysisPrompt(documentText) {
    return `
You are an expert document editor. Analyze the following document and provide specific editing suggestions to improve clarity, readability, and effectiveness.

DOCUMENT:
${documentText}

Please provide your response as a JSON array of editing actions. Each action should have this structure:
{
  "action": "modify|insert|delete",
  "index": (paragraph index for modify/delete, starting from 0),
  "after_index": (paragraph index to insert after, for insert actions),
  "instruction": "specific instruction for what to change",
  "reason": "explanation of why this change improves the document"
}

Focus on:
1. Breaking down overly long sentences
2. Improving clarity and readability
3. Strengthening transitions between ideas
4. Removing redundancy
5. Enhancing overall flow

Limit your response to the 5 most impactful suggestions. Return only the JSON array, no other text.
`;
  }

  /**
   * Call the Gemini API with retry logic
   * @param {string} prompt - The prompt to send
   * @param {number} attemptNumber - Current attempt number
   * @returns {Promise<string>} - AI response
   */
  async callGeminiAPIWithRetry(prompt, attemptNumber = 1) {
    const operationId = this.performanceMonitor.startOperation('geminiAPICall', {
      attempt: attemptNumber,
      promptLength: prompt.length
    });

    try {
      this.logger.debug(`Gemini API call attempt ${attemptNumber}`, { 
        promptLength: prompt.length 
      });

      const response = await this.callGeminiAPI(prompt);
      
      this.logger.info('Gemini API call successful', { 
        attempt: attemptNumber,
        responseLength: response.length 
      });

      this.performanceMonitor.endOperation(operationId, 'SUCCESS', {
        attempt: attemptNumber,
        responseLength: response.length
      });

      return response;

    } catch (error) {
      const errorInfo = this.errorHandler.handleError(error, 'geminiAPICall', {
        attempt: attemptNumber,
        promptLength: prompt.length
      });

      this.performanceMonitor.endOperation(operationId, 'ERROR', {
        attempt: attemptNumber,
        errorCategory: errorInfo.category
      });

      // Check if we should retry
      if (this.errorHandler.shouldRetry(error, attemptNumber) && attemptNumber < this.maxRetries) {
        const delay = Math.pow(2, attemptNumber) * 1000; // Exponential backoff
        this.logger.warn(`Retrying API call after ${delay}ms`, { 
          attempt: attemptNumber,
          nextAttempt: attemptNumber + 1,
          error: error.message 
        });

        await new Promise(resolve => setTimeout(resolve, delay));
        return this.callGeminiAPIWithRetry(prompt, attemptNumber + 1);
      }

      // All retries exhausted or non-retryable error
      throw new Error(errorInfo.userMessage);
    }
  }

  /**
   * Make the actual API call to Gemini
   * @param {string} prompt - The prompt to send
   * @returns {Promise<string>} - AI response
   */
  async callGeminiAPI(prompt) {
    // For demo purposes, return mock data
    // In production, this would make actual API calls through a secure backend
    
    try {
      // Simulate realistic API delay
      const delay = 1500 + Math.random() * 1000; // 1.5-2.5 seconds
      await new Promise(resolve => setTimeout(resolve, delay));
      
      // Simulate occasional API failures for testing
      if (Math.random() < 0.05) { // 5% failure rate
        throw new Error('Simulated API timeout');
      }
      
      // Generate mock response based on prompt content
      const suggestions = this.generateMockSuggestions(prompt);
      
      return JSON.stringify(suggestions);
      
    } catch (error) {
      // Re-throw with more context
      throw new Error(`API call failed: ${error.message}`);
    }
  }

  /**
   * Generate realistic mock suggestions for demo purposes
   * @param {string} prompt - The analysis prompt
   * @returns {Array} - Mock suggestions
   */
  generateMockSuggestions(prompt) {
    const suggestions = [];
    
    // Extract document text from prompt (rough estimation)
    const docTextMatch = prompt.match(/DOCUMENT:\s*([\s\S]*?)\s*Please provide/);
    const documentText = docTextMatch ? docTextMatch[1] : '';
    
    // 🔍 DEBUG: Show paragraph-by-paragraph analysis
    console.log('\n🔍 PARAGRAPH-BY-PARAGRAPH AI ANALYSIS:');
    console.log('=' .repeat(60));
    
    if (documentText) {
      const paragraphs = documentText.split('\n').filter(p => p.trim().length > 0);
      
      console.log(`📄 Document has ${paragraphs.length} paragraphs to analyze:`);
      
      paragraphs.forEach((paragraph, index) => {
        console.log(`\n📝 PARAGRAPH ${index}:`);
        console.log(`   Content: "${paragraph.substring(0, 100)}${paragraph.length > 100 ? '...' : ''}"`);
        console.log(`   Length: ${paragraph.length} characters, ${paragraph.split(/\s+/).length} words`);
        
        let analysisResults = [];
        
        // Analyze for long sentences
        if (paragraph.length > 150) {
          analysisResults.push('🔴 TOO LONG - Breaking down suggested');
          suggestions.push({
            action: "modify",
            index: index,
            instruction: "Break this long sentence into shorter, more digestible sentences for better readability.",
            reason: "Long sentences can be difficult to follow and may lose reader attention"
          });
        }
        
        // Analyze for passive voice
        if (paragraph.includes("was") || paragraph.includes("were") || paragraph.includes("is being")) {
          analysisResults.push('🟡 PASSIVE VOICE - Active voice suggested');
          suggestions.push({
            action: "modify",
            index: index,
            instruction: "Consider revising to use active voice for more direct and engaging writing.",
            reason: "Active voice is generally more engaging and easier to understand"
          });
        }
        
        // Check readability
        if (paragraph.split(/\s+/).length > 25) {
          analysisResults.push('🟠 COMPLEXITY - Simplification suggested');
        }
        
        if (analysisResults.length === 0) {
          analysisResults.push('✅ GOOD - No issues detected');
        }
        
        console.log(`   Analysis: ${analysisResults.join(', ')}`);
      });
      
      // Add transitional improvements
      if (paragraphs.length > 2) {
        const insertIndex = Math.floor(paragraphs.length / 2);
        console.log(`\n🔗 FLOW ANALYSIS: Adding transition after paragraph ${insertIndex}`);
        suggestions.push({
          action: "insert",
          after_index: insertIndex,
          instruction: "Add a transitional sentence to better connect these ideas and improve document flow.",
          reason: "Better transitions help readers follow the logical progression of ideas"
        });
      }
    }
    
    // Add some general suggestions if none were generated
    if (suggestions.length === 0) {
      console.log('\n⚠️ No specific issues found - Adding general improvement suggestion');
      suggestions.push({
        action: "modify",
        index: 0,
        instruction: "Consider strengthening the opening sentence to better engage readers.",
        reason: "Strong openings are crucial for maintaining reader interest"
      });
    }
    
    console.log(`\n🎯 FINAL ANALYSIS: Generated ${suggestions.length} suggestions`);
    console.log('=' .repeat(60));
    
    // Limit to 4 suggestions for better UX
    return suggestions.slice(0, 4);
  }

  /**
   * Parse AI response into structured suggestions
   * @param {string} response - Raw AI response
   * @returns {Array} - Parsed suggestions
   */
  parseAISuggestions(response) {
    const operationId = this.performanceMonitor.startOperation('parseAISuggestions', {
      responseLength: response.length
    });

    try {
      this.logger.debug('Parsing AI response', { responseLength: response.length });

      // Clean up the response (remove any markdown or extra text)
      let cleanResponse = response.trim();
      
      // Remove common markdown formatting
      cleanResponse = cleanResponse.replace(/```json|```/g, '');
      cleanResponse = cleanResponse.replace(/^[^[{]*/, ''); // Remove text before JSON
      cleanResponse = cleanResponse.replace(/[^}\]]*$/, ''); // Remove text after JSON
      
      // Attempt to parse JSON
      let suggestions;
      try {
        suggestions = JSON.parse(cleanResponse);
      } catch (parseError) {
        this.logger.warn('JSON parsing failed, attempting to extract suggestions', { 
          parseError: parseError.message 
        });
        
        // Try to extract suggestions from malformed response
        suggestions = this.extractSuggestionsFromText(response);
      }

      // Validate and filter suggestions
      const validSuggestions = this.validateSuggestions(suggestions);
      
      this.logger.info('AI response parsed successfully', { 
        rawSuggestions: suggestions.length,
        validSuggestions: validSuggestions.length 
      });

      this.performanceMonitor.endOperation(operationId, 'SUCCESS', {
        suggestionsExtracted: validSuggestions.length
      });

      return validSuggestions;

    } catch (error) {
      const errorInfo = this.errorHandler.handleError(error, 'parseAISuggestions', {
        responseLength: response.length
      });

      this.performanceMonitor.endOperation(operationId, 'ERROR', {
        errorCategory: errorInfo.category
      });

      this.logger.warn('Failed to parse AI response, using fallback suggestions');
      
      // Return fallback suggestions instead of failing completely
      return this.getFallbackSuggestions();
    }
  }

  /**
   * Extract suggestions from malformed text response
   * @param {string} text - Response text to analyze
   * @returns {Array} - Extracted suggestions
   */
  extractSuggestionsFromText(text) {
    this.logger.debug('Attempting to extract suggestions from text');
    
    // Try to find JSON-like patterns in the text
    const suggestions = [];
    
    // Look for action patterns
    const actionPatterns = [
      /(?:modify|insert|delete|move)/gi,
      /(?:paragraph|sentence|text)/gi,
      /(?:improve|enhance|clarify|simplify)/gi
    ];
    
    let hasActionPattern = false;
    for (const pattern of actionPatterns) {
      if (pattern.test(text)) {
        hasActionPattern = true;
        break;
      }
    }
    
    if (hasActionPattern) {
      // Generate suggestions based on detected patterns
      suggestions.push({
        action: "modify",
        index: 0,
        instruction: "Review and improve based on AI analysis.",
        reason: "AI detected areas for improvement"
      });
    }
    
    return suggestions;
  }

  /**
   * Validate suggestions structure
   * @param {Array} suggestions - Raw suggestions from AI
   * @returns {Array} - Validated suggestions
   */
  validateSuggestions(suggestions) {
    if (!Array.isArray(suggestions)) {
      return this.getFallbackSuggestions();
    }

    return suggestions.filter(suggestion => {
      // First check if suggestion is not null/undefined
      if (!suggestion || typeof suggestion !== 'object') {
        return false;
      }
      
      return suggestion.action && 
             suggestion.instruction && 
             (suggestion.index !== undefined || suggestion.after_index !== undefined);
    }).slice(0, 5); // Limit to 5 suggestions
  }

  /**
   * Get fallback suggestions if AI parsing fails
   * @returns {Array} - Default suggestions
   */
  getFallbackSuggestions() {
    return [
      {
        action: "modify",
        index: 0,
        instruction: "Review the opening paragraph for clarity and impact.",
        reason: "Strong openings engage readers more effectively"
      },
      {
        action: "insert",
        after_index: 0,
        instruction: "Consider adding a topic sentence to introduce the main theme.",
        reason: "Clear topic sentences help readers understand document structure"
      }
    ];
  }

  /**
   * Test the AI service connection
   * @returns {Promise<boolean>} - True if service is available
   */
  async testConnection() {
    try {
      const testPrompt = "Respond with only 'OK' if you can understand this message.";
      const response = await this.callGeminiAPI(testPrompt);
      return response.toLowerCase().includes('ok');
    } catch (error) {
      console.error('AI service connection test failed:', error);
      return false;
    }
  }
}

/**
 * Document Service for Word API interactions
 */
class DocumentService {
  constructor() {
    this.logger = globalLogger;
    this.errorHandler = globalErrorHandler;
    this.performanceMonitor = globalPerformanceMonitor;
    
    this.logger.info('Document Service initialized');
  }
  /**
   * Extract all text from the document
   * @returns {Promise<string>} - Document text
   */
  async extractText() {
    const operationId = this.performanceMonitor.startOperation('extractText');

    try {
      this.logger.debug('Extracting document text');

      const text = await Word.run(async (context) => {
        const body = context.document.body;
        body.load("text");
        await context.sync();
        
        if (!body.text) {
          throw new Error('No text content found in document');
        }
        
        return body.text;
      });

      this.logger.info('Document text extracted', { textLength: text.length });
      this.performanceMonitor.endOperation(operationId, 'SUCCESS', { textLength: text.length });

      return text;

    } catch (error) {
      const errorInfo = this.errorHandler.handleError(error, 'extractText');
      this.performanceMonitor.endOperation(operationId, 'ERROR', { errorCategory: errorInfo.category });
      
      throw new Error(errorInfo.userMessage);
    }
  }

  /**
   * Get paragraph count
   * @returns {Promise<number>} - Number of paragraphs
   */
  async getParagraphCount() {
    return Word.run(async (context) => {
      const paragraphs = context.document.body.paragraphs;
      paragraphs.load("items");
      await context.sync();
      return paragraphs.items.length;
    });
  }

  /**
   * Get word count
   * @returns {Promise<number>} - Number of words
   */
  async getWordCount() {
    const text = await this.extractText();
    return text.trim().split(/\s+/).filter(word => word.length > 0).length;
  }

  /**
   * Validate document size for processing
   * @param {number} wordCount - Number of words
   * @returns {boolean} - True if document is suitable for processing
   */
  validateDocumentSize(wordCount) {
    return wordCount > 0 && wordCount <= 10000;
  }

  /**
   * Apply a single suggestion to the document
   * @param {Object} suggestion - The suggestion to apply
   * @returns {Promise<void>}
   */
  async applySuggestion(suggestion) {
    // 🔍 DEBUG: Show suggestion being applied
    console.log(`\n🎯 APPLYING SUGGESTION:`, suggestion);
    
    return Word.run(async (context) => {
      try {
        const paragraphs = context.document.body.paragraphs;
        paragraphs.load("items");
        await context.sync();

        console.log(`📊 Document has ${paragraphs.items.length} paragraphs`);

        if (suggestion.action === "modify" && suggestion.index < paragraphs.items.length) {
          console.log(`🔧 MODIFYING paragraph ${suggestion.index}`);
          const paragraph = paragraphs.items[suggestion.index];
          
          // Load paragraph content for debugging
          paragraph.load("text");
          await context.sync();
          console.log(`📝 Original text: "${paragraph.text.substring(0, 100)}..."`);
          
          // Skip comment insertion for now - use inline notes only
          console.log('💬 Skipping comment insertion, using inline note only');
          
          // Also add a note at the end of the paragraph
          const range = paragraph.getRange(Word.RangeLocation.end);
          range.insertText(` [AI: ${suggestion.instruction}]`, Word.InsertLocation.after);
          range.font.color = "#0078d4";
          range.font.italic = true;
          console.log(`✅ Inline note added successfully`);
          
        } else if (suggestion.action === "insert") {
          console.log(`➕ INSERTING paragraph after ${suggestion.after_index}`);
          // Insert new paragraph
          let insertLocation = Word.InsertLocation.end;
          let targetRange = context.document.body;
          
          if (suggestion.after_index !== undefined && suggestion.after_index < paragraphs.items.length) {
            // Insert after specific paragraph
            const afterParagraph = paragraphs.items[suggestion.after_index];
            targetRange = afterParagraph.getRange(Word.RangeLocation.end);
            insertLocation = Word.InsertLocation.after;
          }
          
          const newParagraph = targetRange.insertParagraph(
            `[AI Suggestion: ${suggestion.instruction}]`, 
            insertLocation
          );
          newParagraph.font.color = "#0078d4";
          newParagraph.font.italic = true;
          console.log(`✅ New paragraph inserted successfully`);
          
        } else if (suggestion.action === "delete" && suggestion.index < paragraphs.items.length) {
          console.log(`🗑️ MARKING FOR DELETION paragraph ${suggestion.index}`);
          const paragraph = paragraphs.items[suggestion.index];
          
          // Load paragraph content for debugging
          paragraph.load("text");
          await context.sync();
          console.log(`📝 Text to mark for deletion: "${paragraph.text.substring(0, 100)}..."`);
          
          // Add a comment suggesting deletion (using correct Office.js API)
          try {
            // Get the range of the paragraph and insert comment
            const range = paragraph.getRange();
            range.load("text");
            await context.sync();
            
            // Insert comment using the range
            range.insertComment(`AI Suggestion: Consider removing this paragraph. ${suggestion.reason}`);
            console.log(`💬 Deletion comment added successfully`);
          } catch (commentError) {
            console.log('⚠️ Comment insertion failed, adding inline note instead:', commentError);
          }
          
          // Strike through the text to indicate deletion suggestion
          paragraph.font.strikeThrough = true;
          paragraph.font.color = "#a80000";
          console.log(`✅ Strike-through formatting applied`);
        } else {
          console.log(`⚠️ SKIPPING suggestion - invalid action or index out of bounds`);
          console.log(`   Action: ${suggestion.action}, Index: ${suggestion.index}, Max paragraphs: ${paragraphs.items.length}`);
        }

        await context.sync();
        console.log(`✅ Suggestion applied and synced successfully`);
        
      } catch (error) {
        console.error(`❌ Error applying suggestion:`, error);
        console.error(`   Suggestion:`, suggestion);
        throw error;
      }
    });
        
      } else if (suggestion.action === "insert") {
        // Insert new paragraph
        let insertLocation = Word.InsertLocation.end;
        let targetRange = context.document.body;
        
        if (suggestion.after_index !== undefined && suggestion.after_index < paragraphs.items.length) {
          // Insert after specific paragraph
          const afterParagraph = paragraphs.items[suggestion.after_index];
          targetRange = afterParagraph.getRange(Word.RangeLocation.end);
          insertLocation = Word.InsertLocation.after;
        }
        
        const newParagraph = targetRange.insertParagraph(
          `[AI Suggestion: ${suggestion.instruction}]`, 
          insertLocation
        );
        newParagraph.font.color = "#0078d4";
        newParagraph.font.italic = true;
        
      } else if (suggestion.action === "delete" && suggestion.index < paragraphs.items.length) {
        const paragraph = paragraphs.items[suggestion.index];
        
        // Add a comment suggesting deletion (using correct Office.js API)
        try {
          // Get the range of the paragraph and insert comment
          const range = paragraph.getRange();
          range.load("text");
          await context.sync();
          
          // Insert comment using the range
          range.insertComment(`AI Suggestion: Consider removing this paragraph. ${suggestion.reason}`);
        } catch (commentError) {
          console.log('Comment insertion failed, adding inline note instead:', commentError);
        }
        
        // Strike through the text to indicate deletion suggestion
        paragraph.font.strikeThrough = true;
        paragraph.font.color = "#a80000";
      }

      await context.sync();
    });
  }

  /**
   * Create a backup of the current document state
   * @returns {Promise<Object>} - Document snapshot
   */
  async createSnapshot() {
    return Word.run(async (context) => {
      const body = context.document.body;
      const paragraphs = context.document.body.paragraphs;
      
      body.load("text");
      paragraphs.load("items");
      
      await context.sync();
      
      return {
        text: body.text,
        paragraphCount: paragraphs.items.length,
        timestamp: new Date().toISOString()
      };
    });
  }
}

/**
 * Main AI Document Review Service
 * Coordinates between AI analysis and document manipulation
 */
class AIDocumentReviewService {
  constructor() {
    this.aiService = new AIService();
    this.documentService = new DocumentService();
  }

  /**
   * Analyze the current document and return suggestions
   * @returns {Promise<Array>} - Array of suggestions
   */
  async analyzeDocument() {
    // Extract document content
    const documentText = await this.documentService.extractText();
    
    // Validate document
    const wordCount = await this.documentService.getWordCount();
    if (!this.documentService.validateDocumentSize(wordCount)) {
      throw new Error(`Document size not suitable for processing (${wordCount} words). Please use documents between 1 and 10,000 words.`);
    }

    // Get AI analysis
    const suggestions = await this.aiService.analyzeDocument(documentText);
    
    // Validate against current document structure
    const paragraphCount = await this.documentService.getParagraphCount();
    return this.validateSuggestionsAgainstDocument(suggestions, paragraphCount);
  }

  /**
   * Apply multiple suggestions to the document
   * @param {Array} suggestions - Suggestions to apply
   * @returns {Promise<number>} - Number of successfully applied suggestions
   */
  async applySuggestions(suggestions) {
    let appliedCount = 0;
    
    for (const suggestion of suggestions) {
      try {
        await this.documentService.applySuggestion(suggestion);
        appliedCount++;
      } catch (error) {
        console.error('Failed to apply suggestion:', suggestion, error);
      }
    }
    
    return appliedCount;
  }

  /**
   * Validate suggestions against current document structure
   * @param {Array} suggestions - Suggestions to validate
   * @param {number} paragraphCount - Current paragraph count
   * @returns {Array} - Valid suggestions
   */
  validateSuggestionsAgainstDocument(suggestions, paragraphCount) {
    return suggestions.filter(suggestion => {
      // Validate modify and delete actions
      if ((suggestion.action === "modify" || suggestion.action === "delete") &&
          (suggestion.index < 0 || suggestion.index >= paragraphCount)) {
        return false;
      }
      
      // Validate insert actions
      if (suggestion.action === "insert" &&
          (suggestion.after_index < 0 || suggestion.after_index >= paragraphCount)) {
        return false;
      }
      
      return true;
    });
  }

  /**
   * Get document information
   * @returns {Promise<Object>} - Document info
   */
  async getDocumentInfo() {
    const wordCount = await this.documentService.getWordCount();
    const paragraphCount = await this.documentService.getParagraphCount();
    
    return {
      wordCount,
      paragraphCount,
      isValid: this.documentService.validateDocumentSize(wordCount)
    };
  }
}

// Create global instance
window.aiDocumentReviewService = new AIDocumentReviewService();

// Export for use in other modules
export { AIDocumentReviewService, AIService, DocumentService };
